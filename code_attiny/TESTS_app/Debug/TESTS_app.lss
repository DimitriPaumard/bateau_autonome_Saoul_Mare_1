
TESTS_app.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000134  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000001a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  00800060  00800060  000001a8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001a8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001d8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000048  00000000  00000000  00000214  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000562  00000000  00000000  0000025c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000048a  00000000  00000000  000007be  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002a1  00000000  00000000  00000c48  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000009c  00000000  00000000  00000eec  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000030e  00000000  00000000  00000f88  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000092  00000000  00000000  00001296  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000038  00000000  00000000  00001328  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0e c0       	rjmp	.+28     	; 0x1e <__ctors_end>
   2:	37 c0       	rjmp	.+110    	; 0x72 <__vector_1>
   4:	1c c0       	rjmp	.+56     	; 0x3e <__bad_interrupt>
   6:	1c c0       	rjmp	.+56     	; 0x40 <__vector_3>
   8:	1a c0       	rjmp	.+52     	; 0x3e <__bad_interrupt>
   a:	19 c0       	rjmp	.+50     	; 0x3e <__bad_interrupt>
   c:	18 c0       	rjmp	.+48     	; 0x3e <__bad_interrupt>
   e:	17 c0       	rjmp	.+46     	; 0x3e <__bad_interrupt>
  10:	16 c0       	rjmp	.+44     	; 0x3e <__bad_interrupt>
  12:	15 c0       	rjmp	.+42     	; 0x3e <__bad_interrupt>
  14:	14 c0       	rjmp	.+40     	; 0x3e <__bad_interrupt>
  16:	13 c0       	rjmp	.+38     	; 0x3e <__bad_interrupt>
  18:	12 c0       	rjmp	.+36     	; 0x3e <__bad_interrupt>
  1a:	11 c0       	rjmp	.+34     	; 0x3e <__bad_interrupt>
  1c:	10 c0       	rjmp	.+32     	; 0x3e <__bad_interrupt>

0000001e <__ctors_end>:
  1e:	11 24       	eor	r1, r1
  20:	1f be       	out	0x3f, r1	; 63
  22:	cf e5       	ldi	r28, 0x5F	; 95
  24:	d2 e0       	ldi	r29, 0x02	; 2
  26:	de bf       	out	0x3e, r29	; 62
  28:	cd bf       	out	0x3d, r28	; 61

0000002a <__do_clear_bss>:
  2a:	20 e0       	ldi	r18, 0x00	; 0
  2c:	a0 e6       	ldi	r26, 0x60	; 96
  2e:	b0 e0       	ldi	r27, 0x00	; 0
  30:	01 c0       	rjmp	.+2      	; 0x34 <.do_clear_bss_start>

00000032 <.do_clear_bss_loop>:
  32:	1d 92       	st	X+, r1

00000034 <.do_clear_bss_start>:
  34:	a3 36       	cpi	r26, 0x63	; 99
  36:	b2 07       	cpc	r27, r18
  38:	e1 f7       	brne	.-8      	; 0x32 <.do_clear_bss_loop>
  3a:	68 d0       	rcall	.+208    	; 0x10c <main>
  3c:	79 c0       	rjmp	.+242    	; 0x130 <_exit>

0000003e <__bad_interrupt>:
  3e:	e0 cf       	rjmp	.-64     	; 0x0 <__vectors>

00000040 <__vector_3>:
unsigned char start_counting = 0;
uint16_t time_counter = 0;


ISR(TIMER1_COMPA_vect) //timer interrupt service routine
{
  40:	1f 92       	push	r1
  42:	0f 92       	push	r0
  44:	0f b6       	in	r0, 0x3f	; 63
  46:	0f 92       	push	r0
  48:	11 24       	eor	r1, r1
  4a:	8f 93       	push	r24
  4c:	9f 93       	push	r25
	/* counter value with time
	1 ms   = 40
	1.5 ms = 60
	2 ms   = 80 
	*/
	cli();
  4e:	f8 94       	cli
	
	time_counter++;
  50:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  54:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
  58:	01 96       	adiw	r24, 0x01	; 1
  5a:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
  5e:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
	sei();
  62:	78 94       	sei
}
  64:	9f 91       	pop	r25
  66:	8f 91       	pop	r24
  68:	0f 90       	pop	r0
  6a:	0f be       	out	0x3f, r0	; 63
  6c:	0f 90       	pop	r0
  6e:	1f 90       	pop	r1
  70:	18 95       	reti

00000072 <__vector_1>:

ISR (INT0_vect)        // extern Interrupt service routine
{	cli();
  72:	1f 92       	push	r1
  74:	0f 92       	push	r0
  76:	0f b6       	in	r0, 0x3f	; 63
  78:	0f 92       	push	r0
  7a:	11 24       	eor	r1, r1
  7c:	8f 93       	push	r24
  7e:	9f 93       	push	r25
  80:	f8 94       	cli
	if((PINB &(1<<PB2))) //if logic 1 front montant
  82:	b2 9b       	sbis	0x16, 2	; 22
  84:	08 c0       	rjmp	.+16     	; 0x96 <__vector_1+0x24>
	{
		time_counter = 0;
  86:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
  8a:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
		start_counting = 1;
  8e:	81 e0       	ldi	r24, 0x01	; 1
  90:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <start_counting>
  94:	0f c0       	rjmp	.+30     	; 0xb4 <__vector_1+0x42>
	}
	
	else /*if(!(PINB &(1<<PB2)))*/ //if logic 0
	{
		start_counting = 0;
  96:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <start_counting>
		
		if(time_counter >60)
  9a:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  9e:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
  a2:	cd 97       	sbiw	r24, 0x3d	; 61
  a4:	20 f0       	brcs	.+8      	; 0xae <__vector_1+0x3c>
			PORTB |= (1<<4);
  a6:	88 b3       	in	r24, 0x18	; 24
  a8:	80 61       	ori	r24, 0x10	; 16
  aa:	88 bb       	out	0x18, r24	; 24
  ac:	03 c0       	rjmp	.+6      	; 0xb4 <__vector_1+0x42>
		else
			PORTB &= ~(1<<4);
  ae:	88 b3       	in	r24, 0x18	; 24
  b0:	8f 7e       	andi	r24, 0xEF	; 239
  b2:	88 bb       	out	0x18, r24	; 24
		//time_counter   = 0;
	}
	sei();
  b4:	78 94       	sei
}
  b6:	9f 91       	pop	r25
  b8:	8f 91       	pop	r24
  ba:	0f 90       	pop	r0
  bc:	0f be       	out	0x3f, r0	; 63
  be:	0f 90       	pop	r0
  c0:	1f 90       	pop	r1
  c2:	18 95       	reti

000000c4 <init_GPIO>:

void init_GPIO()
{
	DDRB |= (1<<PB4)|(1<<PB0);
  c4:	87 b3       	in	r24, 0x17	; 23
  c6:	81 61       	ori	r24, 0x11	; 17
  c8:	87 bb       	out	0x17, r24	; 23
  ca:	08 95       	ret

000000cc <init_interrupt>:
	
}
void init_interrupt()
{					
	GIMSK |= (1<<INT0);     // enabling the INT0 (external interrupt)
  cc:	8b b7       	in	r24, 0x3b	; 59
  ce:	80 64       	ori	r24, 0x40	; 64
  d0:	8b bf       	out	0x3b, r24	; 59
	MCUCR |= (1<<ISC00);    // Configuring as falling edge
  d2:	85 b7       	in	r24, 0x35	; 53
  d4:	81 60       	ori	r24, 0x01	; 1
  d6:	85 bf       	out	0x35, r24	; 53
	DDRB &= ~(1<<PB2);
  d8:	87 b3       	in	r24, 0x17	; 23
  da:	8b 7f       	andi	r24, 0xFB	; 251
  dc:	87 bb       	out	0x17, r24	; 23
	DDRB|=(1<<PB0);			//configure PB2 as input
  de:	87 b3       	in	r24, 0x17	; 23
  e0:	81 60       	ori	r24, 0x01	; 1
  e2:	87 bb       	out	0x17, r24	; 23
	PORTB &=~(1<<PB0);		//pull down
  e4:	88 b3       	in	r24, 0x18	; 24
  e6:	8e 7f       	andi	r24, 0xFE	; 254
  e8:	88 bb       	out	0x18, r24	; 24
	GIMSK|= (1<<PCIE);		//enable interrupt on INT0
  ea:	8b b7       	in	r24, 0x3b	; 59
  ec:	80 62       	ori	r24, 0x20	; 32
  ee:	8b bf       	out	0x3b, r24	; 59
	sei();	//enabling global interrupt
  f0:	78 94       	sei
  f2:	08 95       	ret

000000f4 <init_timer>:
}
void init_timer()
{
	TCCR1 |= (1 << CTC1);  // clear timer on compare match
  f4:	80 b7       	in	r24, 0x30	; 48
  f6:	80 68       	ori	r24, 0x80	; 128
  f8:	80 bf       	out	0x30, r24	; 48
	TCCR1 |= (1 << CS11); //clock prescaler 8192
  fa:	80 b7       	in	r24, 0x30	; 48
  fc:	82 60       	ori	r24, 0x02	; 2
  fe:	80 bf       	out	0x30, r24	; 48
	OCR1C = 100; // compare match value
 100:	84 e6       	ldi	r24, 0x64	; 100
 102:	8d bd       	out	0x2d, r24	; 45
	TIMSK |= (1 << OCIE1A); // enable compare match interrupt
 104:	89 b7       	in	r24, 0x39	; 57
 106:	80 64       	ori	r24, 0x40	; 64
 108:	89 bf       	out	0x39, r24	; 57
 10a:	08 95       	ret

0000010c <main>:
}


int main(void)
{
	init_GPIO();
 10c:	db df       	rcall	.-74     	; 0xc4 <init_GPIO>
	init_timer();
 10e:	f2 df       	rcall	.-28     	; 0xf4 <init_timer>
	init_interrupt();
 110:	dd df       	rcall	.-70     	; 0xcc <init_interrupt>
	
    while (1) 
    {
		if(time_counter > 2000)
 112:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 116:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 11a:	81 3d       	cpi	r24, 0xD1	; 209
 11c:	97 40       	sbci	r25, 0x07	; 7
 11e:	c8 f3       	brcs	.-14     	; 0x112 <main+0x6>
		{
			time_counter = 0;
 120:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 124:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
			PORTB |= (1<<4);
 128:	88 b3       	in	r24, 0x18	; 24
 12a:	80 61       	ori	r24, 0x10	; 16
 12c:	88 bb       	out	0x18, r24	; 24
 12e:	f1 cf       	rjmp	.-30     	; 0x112 <main+0x6>

00000130 <_exit>:
 130:	f8 94       	cli

00000132 <__stop_program>:
 132:	ff cf       	rjmp	.-2      	; 0x132 <__stop_program>
